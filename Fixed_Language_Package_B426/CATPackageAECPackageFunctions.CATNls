<meta charset="UTF-8"/>

PackageName="AECPackageFunctions";

CATKnowledge.GetAlignment.Description="<p> 从 3D 线路中检索线路方式。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>3D 线路<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 线路。<//p>";
CATKnowledge.GetAlignment.Sample="Let my3DAlignment(AECAlignment3D)\nLet myAlignment(AECAlignment)\n\nmyAlignment = my3DAlignment.GetAlignment()\n";

CATKnowledge.GetVerticalAlignment.Description="<p> 从线路中检索垂直线路方式。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>线路<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 垂直线路。<//p>";
CATKnowledge.GetVerticalAlignment.Sample="Let myAlignment(AECAlignment)\nLet myVerticalAlignment(AECAlignment2DVertical)\n\nmyVerticalAlignment = myAlignment.GetVerticalAlignment()\n";

CATKnowledge.GetListOfSegments.Description="<p>检索水平或垂直线路的段列表。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>水平或垂直线路<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 段列表。<//p>";
CATKnowledge.GetListOfSegments.Sample="Let myHA(AECAlignment2DHorizontal)\nLet myListOfSegments(List)\nmyListOfSegments = myHA.GetListOfSegments()\n";

CATKnowledge.GetHorizontalAlignments.Description="<p>从网络中检索水平线路列表。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>水平网络<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 水平线路列表。<//p>";
CATKnowledge.GetHorizontalAlignments.Sample="Let myHN(AECHorizontalNetwork)\nLet myListOfHorizontalAlignments(List)\nmyListOfHorizontalAlignments = myHN.GetHorizontalAlignments()\n";

CATKnowledge.GetVerticalAlignmentSegmentInfo.Description="<p> 检索有关垂直线路线段的相关信息。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>垂直线路曲线<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 沿曲线的起始距离、水平长度、起点处的高度、起点处的梯度、半径（如果是顶点）<//p>";
CATKnowledge.GetVerticalAlignmentSegmentInfo.Sample="Let AECVertCurve (AECVerticalCurve)\nLet StartDist(Real)\nLet HorizLength(Real)\nLet StartHeight(Real)\nLet StartGradient(Real)\nLet Radius(Real)\nLet IsConvex(Boolean)\n\nAECVertCurve.GetVerticalAlignmentSegmentInfo(StartDist, HorizLength, StartHeight, StartGradient, Radius, IsConvex)\n";

CATKnowledge.GetHorizontalAlignmentSegmentInfo.Description="<p>检索有关水平线路段的相关信息。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>水平线路曲线：Arc(AECHorizontalArc) 或 Clothoid(AECHorizontalClothoid) 或 Tangent(AECHorizontalTangent)<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 沿曲线的起点、沿曲线的终点、起始方向、长度、半径、是否是 CCW、是否是入口点以及回旋曲线常量<//p>";
CATKnowledge.GetHorizontalAlignmentSegmentInfo.Sample="Let myHCurve(AECHorizontalArc)\nLet myStartPt(AECAlignmentPoint)\nLet myEndPt(AECAlignmentPoint)\nLet myStartDirection(Real)\nLet myLength(LENGTH)\nLet myRadius(LENGTH)\nLet IsCCW(Boolean)\nLet IsEntry(Boolean)\nLet myClothoidConstant(Real)\n\nmyHCurve.GetHorizontalAlignmentSegmentInfo(myStartPt, myEndPt, myStartDirection, myLength, myRadius, IsCCW, IsEntry, myClothoidConstant)\n";

CATKnowledge.GetCoordinates.Description="<p> 为给定线路点检索 2D 位置坐标（用 MKS 表示）及向东和向北坐标。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>线路点<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- X 和 Y 位置坐标以及兴趣线路点的向东和向北坐标。<//p>";
CATKnowledge.GetCoordinates.Sample="Let myPoint(AECAlignmentPoint)\nLet myPointX(LENGTH)\nLet myPointY(LENGTH)\nLet myPointE(Real)\nLet myPointN(Real)\n\nmyPoint.GetCoordinates(myPointX, myPointY, myPointE, myPointN)\n";

CATKnowledge.GetStationing.Description="<p>检索给定线路点或垂直线路点的布点值。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>线路点 (AECAlignmentPoint) 或垂直线路点 (AECVerticalAlignmentPoint)，<//p><p>UnitString(String) 可以是英尺、米等。这将确定桩号字符串的显示单位，<//p><p>DisplayTrailingZero(Boolean)，<br />TRUE：例如 12+345.60 <br />FALSE：例如 12+345.6，<//p><p>MaxDecimalPlaces(Integer) <br />0：例如 12+346 <br />1：例如 12+345.7 <br />2：例如 12+345.68 <br />3：例如 12+345.679<//p> <p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p> <p>- 相关线路点或垂直线路点的布点。还将显示线路点的偏移值（如果非零）。<//p>";
CATKnowledge.GetStationing.Sample="Let myPoint(AECAlignmentPoint)
Let strUnit(String)
Let DisplayTrailingZero(Boolean)
Let MaxDecimalPlaces(Integer)
Let myStation(String)
myStation = myPoint.GetStationing(strUnit, DisplayTrailingZero, MaxDecimalPlaces)

            or,

Let myVAPoint(AECVerticalAlignmentPoint)
Let strUnit(String)
Let DisplayTrailingZero(Boolean)
Let MaxDecimalPlaces(Integer)
Let myStation(String)
myStation = myPoint.GetStationing(strUnit, DisplayTrailingZero, MaxDecimalPlaces)\n";

CATKnowledge.GetOffset.Description="<p>检索给定线路点的偏移值。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>线路点 (AECAlignmentPoint)<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 线路点的偏移值。<//p>";
CATKnowledge.GetOffset.Sample="Let myPoint(AECAlignmentPoint)
Let myOffset(LENGTH)
myOffset = myPoint.GetOffset()\n";

CATKnowledge.GetLabel.Description="<p>检索给定线路点或垂直线路点的标签。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>线路点 (AECAlignmentPoint) 或垂直线路点 (AECVerticalAlignmentPoint)<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 线路点或垂直线路兴趣点的标签。<//p>";
CATKnowledge.GetLabel.Sample="Let myPoint(AECAlignmentPoint)
Let myLabel(String)
myLabel = myPoint.GetLabel()

            or,

Let myVAPoint(AECVerticalAlignmentPoint)
Let myLabel(String)
myLabel = myPoint.GetLabel()\n";

CATKnowledge.GetElevation.Description="<p>检索水平曲线上给定线路点的标高（用 MKS 表示）
<br />
<br />                                                    或者，
<br />
<br />此方法返回垂直线路点的标高（用 MKS 表示）。
<br />
<br />                                                    或者，
<br />
<br />此方法返回沿垂直线路的指定距离的标高（用 MKS 表示）。
<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>线路点和线路，或者 AECVerticalAlignmentPoint，或者垂直线路 (AECAlignment2DVertical) 和距离（长度，以米为单位）。<//p>
<p>该距离对应于沿水平轴的距离，也就是展开的水平线路<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 长度尺寸中的标高。<//p>";
CATKnowledge.GetElevation.Sample="Let myPoint(AECAlignmentPoint)
Let myAlignment(AECAlignment)
Let Elevation(LENGTH)
Elevation = myPoint.GetElevation(myAlignment),

            or,

Let myVAPoint(AECVerticalAlignmentPoint)
Let Elevation(LENGTH)
Elevation = myVAPoint.GetElevation(),

            or,

Let myVA(AECAlignment2DVertical)
Let Distance(LENGTH)
Let Elevation(LENGTH)
Elevation = myVA.GetElevation(Distance)\n";

CATKnowledge.GetGrade.Description="<p> 检索切线等级的斜坡。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>切线等级<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 切线等级的斜坡。<//p>";
CATKnowledge.GetGrade.Sample="Let myGrade (AECTangentGrade)\nLet Slope(Real)\n\nSlope = myGrade.GetGrade()\n";

CATKnowledge.GetHorizontalLength.Description="<p> 检索垂直曲线或过渡的水平长度（用 MKS 表示）。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>垂直线路曲线或垂直过渡<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 垂直曲线或过渡的水平长度。<//p>";
CATKnowledge.GetHorizontalLength.Sample="Let AECVertCurve (AECVerticalCurve)
Let HL (LENGTH)
HL = AECVertCurve.GetHorizontalLength(),

            or,

Let AECVertTransition(AECVerticalTransition)
Let HL (LENGTH)
HL = AECVertTransition.GetHorizontalLength()\n";

CATKnowledge.GetAlgebraicDifferenceStartEndGrade.Description="<p>检索垂直曲线开始和结束坡度之间的代数差异。
   AECTangentGrade.GetGrade() 检索的开始和结束坡度应使用显示单位 %_angle 来显示并且其差异是由此方法表示的值且应用显示单位 %_angle 来表示。<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>垂直线路曲线<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 垂直曲线开始和结束坡度之间的代数差异。<//p>";
CATKnowledge.GetAlgebraicDifferenceStartEndGrade.Sample="Let AECVertCurve (AECVerticalCurve)
Let AD(ANGLE)
AD = AECVertCurve.GetAlgebraicDifferenceStartEndGrade()
Let sADStartEndGrade(String)
sADStartEndGrade = DimToString(AD, \"%_angle\")\n";

CATKnowledge.GetRateOfVerticalCurvature.Description="<p> 检索垂直曲线的垂直曲率比率。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>垂直线路曲线<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 垂直曲线的垂直曲率比率。<//p>";
CATKnowledge.GetRateOfVerticalCurvature.Sample="Let AECVertCurve (AECVerticalCurve)\nLet VC(Real)\n\nVC = AECVertCurve.GetRateOfVerticalCurvature()\n";

CATKnowledge.GetVPI.Description="<p> 检索垂直曲线的 PI 的 2D 位置坐标（用 MKS 表示）。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>垂直线路曲线<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 垂直曲线的 PI 的 X 和 Y 位置坐标。<//p>";
CATKnowledge.GetVPI.Sample="Let AECVertCurve (AECVerticalCurve)\nLet VPIX(LENGTH)\nLet VPIY(LENGTH)\n\nAECVertCurve.GetVPI(VPIX, VPIY)\n";

CATKnowledge.GetStartStation.Description="<p> 检索垂直曲线的起点的站值（用 MKS 表示）。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>垂直线路曲线<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 垂直曲线的起点的站。<//p>";
CATKnowledge.GetStartStation.Sample="Let AECVertCurve (AECVerticalCurve)\nLet StartStation(String)\n\nStartStation = AECVertCurve.GetStartStation()\n";

CATKnowledge.GetStartElevation.Description="<p> 检索垂直曲线的起点的标高（用 MKS 表示）。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>垂直线路曲线<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 垂直曲线的起点的标高值。<//p>";
CATKnowledge.GetStartElevation.Sample="Let AECVertCurve (AECVerticalCurve)\nLet StartElevation(LENGTH)\n\nStartElevation = AECVertCurve.GetStartElevation()n";

CATKnowledge.GetEndStation.Description="<p> 检索垂直曲线的终点的站值（用 MKS 表示）。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>垂直线路曲线<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 垂直曲线的 终点的站。<//p>";
CATKnowledge.GetEndStation.Sample="Let AECVertCurve (AECVerticalCurve)\nLet EndStation(String)\n\nEndStation = AECVertCurve.GetEndStation()\n";

CATKnowledge.GetEndElevation.Description="<p> 检索垂直曲线的终点的标高（用 MKS 表示）。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>垂直线路曲线<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 垂直曲线的终点的标高值。<//p>";
CATKnowledge.GetEndElevation.Sample="Let AECVertCurve (AECVerticalCurve)\nLet EndElevation(LENGTH)\n\nEndElevation = AECVertCurve.GetEndElevation()\n";

CATKnowledge.GetType.Description="<p> 检索垂直曲线的类型。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>垂直线路曲线<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 线性、顶部或弦高。<//p>";
CATKnowledge.GetType.Sample="Let AECVertCurve (AECVerticalCurve)\nLet CurveType(CurveTypeEnum)\n\nCurveType = AECVertCurve.GetType()\n";

CATKnowledge.GetStartPosition.Description="<p> 检索垂直曲线的起点的 2D 位置坐标（用 MKS 表示）。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>垂直线路曲线<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 垂直曲线的起点的 X 和 Y 位置坐标。<//p>";
CATKnowledge.GetStartPosition.Sample="Let AECVertCurve (AECVerticalCurve)\nLet StartPosX(LENGTH)\nLet StartPosY(LENGTH)\n\nAECVertCurve.GetStartPosition(StartPosX, StartPosY)\n";

CATKnowledge.GetEndPosition.Description="<p> 检索垂直曲线的终点的 2D 位置坐标（用 MKS 表示）。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>垂直线路曲线<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 垂直曲线的终点的 X 和 Y 位置坐标。<//p>";
CATKnowledge.GetEndPosition.Sample="Let AECVertCurve (AECVerticalCurve)\nLet EndPosX(LENGTH)\nLet EndPosY(LENGTH)\n\nAECVertCurve.GetEndPosition(EndPosX, EndPosY)\n";

CATKnowledge.GetExtremumPosition.Description="<p> 检索垂直曲线的极值点的 2D 位置坐标（用 MKS 表示）。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>垂直线路曲线<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 垂直曲线的极值点的 X 和 Y 位置坐标。<//p>";
CATKnowledge.GetExtremumPosition.Sample="Let AECVertCurve (AECVerticalCurve)\nLet ExtremumPosX(LENGTH)\nLet ExtremumPosY(LENGTH)\n\nAECVertCurve.GetExtremumPosition(ExtremumPosX, ExtremumPosY)\n";

CATKnowledge.GetExtremumPointStation.Description="<p>检索垂直曲线的极值点的站值。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>垂直线路曲线 (AECVerticalCurve)<//p>
<p>UnitString(String) 可以是 ft、m 等。这将确定桩号字符串的显示单位，<//p>
<p>DisplayTrailingZero(Boolean)，<br />TRUE：例如 12+345.60<br />FALSE：例如 12+345.6，
<//p><p>MaxDecimalPlaces(Integer) <br />0：例如 12+346 <br />1：例如 12+345.7 
<br />2：例如 12+345.68 <br />3：例如 12+345.679<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 垂直曲线的极值点的站。<//p>";
CATKnowledge.GetExtremumPointStation.Sample="Let myVertCurve (AECVerticalCurve)
Let strUnit(String)
Let DisplayTrailingZero(Boolean)
Let MaxDecimalPlaces(Integer)
Let ExtremumPointStation(String)
ExtremumPointStation = myVertCurve.GetExtremumPointStation(strUnit, DisplayTrailingZero, MaxDecimalPlaces)\n";

CATKnowledge.GetExtremumPointLabel.Description="<p>检索垂直曲线的极值点的标签。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>垂直线路曲线 (AECVerticalCurve)<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 垂直曲线的极值点的标签。<//p>";
CATKnowledge.GetExtremumPointLabel.Sample="Let myVertCurve (AECVerticalCurve)
Let myLabel(String)
myLabel = myVertCurve.GetLabel()\n";

CATKnowledge.GetExtremumPointDistance.Description="<p>检索垂直曲线的极值点的距离（用 MKS 表示）。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>垂直线路曲线 (AECVerticalCurve)<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 垂直曲线的极值点的距离。<//p>";
CATKnowledge.GetExtremumPointDistance.Sample="Let myVertCurve (AECVerticalCurve)
Let ExtremumPointDistance(LENGTH)
ExtremumPointDistance = myVertCurve.GetExtremumPointDistance()\n";

CATKnowledge.GetExtremumPointElevation.Description="<p> 检索垂直曲线的极值点的标高（用 MKS 表示）。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>垂直线路曲线<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 垂直曲线的极值点的标高值。<//p>";
CATKnowledge.GetExtremumPointElevation.Sample="Let AECVertCurve (AECVerticalCurve)\nLet ExtremumPointElevation(LENGTH)\n\nExtremumPointElevation = AECVertCurve.GetExtremumPointElevation()\n";

CATKnowledge.GetVPIStation.Description="<p> 检索垂直曲线的 PI 的站值（用 MKS 表示）。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>垂直线路曲线<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 垂直曲线的 PI 的站。<//p>";
CATKnowledge.GetVPIStation.Sample="Let AECVertCurve (AECVerticalCurve)\nLet VPIStation(String)\n\nVPIStation = AECVertCurve.GetVPIStation()\n";

CATKnowledge.GetVPIElevation.Description="<p> 检索垂直曲线的 PI 的标高（用 MKS 表示）。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>垂直线路曲线<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 垂直曲线的 PI 的标高值。<//p>";
CATKnowledge.GetVPIElevation.Sample="Let AECVertCurve (AECVerticalCurve)\nLet VPIElevation(LENGTH)\n\nVPIElevation = AECVertCurve.GetVPIElevation()\n";

CATKnowledge.GetStartPointDistance.Description="<p>此方法返回垂直线路的实际起点距离。这可能与模型的水平线路的起点距离不同，其中垂直线路在水平线路后的某个距离开始。它以 LENGTH 尺寸返回距离。
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>垂直线路 (AECAlignment2DVertical)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- LENGTH 尺寸中起点的距离。<//p>";
CATKnowledge.GetStartPointDistance.Sample="Let myVA(AECAlignment2DVertical)
Let dStartDist(LENGTH)
dStartDist=myVA->GetStartPointDistance()\n";

CATKnowledge.GetEndPointDistance.Description="<p>此方法返回垂直线路的实际终点距离。这可能与模型的水平线路的终点距离不同，其中垂直线路在水平线路前的某个距离结束。它以 LENGTH 尺寸返回距离。
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>垂直线路 (AECAlignment2DVertical)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- LENGTH 尺寸中终点的距离。<//p>";
CATKnowledge.GetEndPointDistance.Sample="Let myVA(AECAlignment2DVertical)
Let dEndDist(LENGTH)
dEndDist=myVA->GetEndPointDistance()\n";

CATKnowledge.GetVPIPoint.Description="<p>此方法返回表示垂直曲线相交点的点。
此点对应于与垂直曲线内切和外切的相交点。
返回类型是 AECVerticalAlignmentPoint 类型的特征。<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>垂直线路曲线 (AECVerticalCurve)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>-垂直曲线的相交点作为 AECVerticalAlignmentPoint 类型。<//p>";
CATKnowledge.GetVPIPoint.Sample="Let myVerticalCurve(AECVerticalCurve)
Let VPIPoint(AECVerticalAlignmentPoint)
VPIPoint=myVerticalCurve->GetVPIPoint()
Let sVPIPoint(String)
sVPIPoint = VPIPoint.Name
sVPIPoint = VPIPoint.PrimaryType.Name\n";

CATKnowledge.GetSecondVPIPoint.Description="<p>此方法返回表示垂直曲线第二个相交点的点。
此点对应于与垂直曲线内切和外切的相交点。这与 TCCT 等反向配置相关。
返回类型是 AECVerticalAlignmentPoint 类型的特征。<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>垂直线路曲线 (AECVerticalCurve)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>-垂直曲线的相交点作为 AECVerticalAlignmentPoint 类型。<//p>";
CATKnowledge.GetSecondVPIPoint.Sample="Let myVerticalCurve(AECVerticalCurve)
Let VPIPoint(AECVerticalAlignmentPoint)
VPIPoint=myVerticalCurve->GetSecondVPIPoint()
Let sVPIPoint(String)
sVPIPoint = VPIPoint.Name
sVPIPoint = VPIPoint.PrimaryType.Name\n";

CATKnowledge.GetPassingSightDistanceRatio.Description="<p>检索符合通过距离的垂直对准几何图形的比率。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>通过距离长度<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 符合通过距离的相符垂直线路的比率<//p>";
CATKnowledge.GetPassingSightDistanceRatio.Sample="Let Alignment2DVertical (AlignmentVerticalCurve)\nLet PassingDistance(Length)\nLet PassingDistanceRatio(Ratio)\nPassingDistanceRatio = Alignment2DVertical.GetPassingSightDistanceRatio(PassingDistance)\n";

CATKnowledge.GetSpeed.Description="<p>检索水平道路路线的给定曲线处的速度（以 m/s 为单位）。\n线路几何图形应位于轮廓上，不应是排水元素。\n<br />\n<br />                                                    或，\n<br />\n<br />此方法返回此水平线路切线截面开始处的设计速度。单位 m/s。\n<br />\n<br />                                                    或，\n<br />\n<br />此方法返回此水平线路回旋曲线或过渡截面开始时的设计速度。单位 m/s。\n<br />\n<br />                                                    或，\n<br />\n<br />此方法返回沿水平线路一定距离处的设计速度。单位 m3/s。\n<br />\n<br />                                                    或，\n<br />\n<br />此方法通过计算沿水平线路相应距离的速度，返回该垂直线路过渡截面开始时的设计速度。单位 m/s。\n<span style=\"font-size:12px;\"></span><//p>\n<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>\n<p>点 (AECAlignmentPoint) 或线路几何图形：水平线路 (Alignment2DHorizontal) 或水平切线 (AECHorizontalTangent) 或水平圆弧 (AECHorizontalArc) 或水平回旋曲线 (AECHorizontalClothoid) 或水平过渡 (AECHorizontalTransition) 或垂直过渡 (AECVerticalTransition)<//p>\n<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>\n<p>- 在给定点或在水平线路或给定线路几何图形起点的特定距离处的速度。<//p>";
CATKnowledge.GetSpeed.Sample="Let myHorizontalAlignment(AECAlignment2DHorizontal)
Let dSpeed(Speed)
Let dDistance(Length)
dSpeed = myHorizontalAlignment->GetSpeed(dDistance)

              or,

Let myHorizontalArc(AECHorizontalArc)
Let dSpeed(Speed)
dSpeed = myHorizontalArc->GetSpeed()

              or,

Let myHorizontalTangent(AECHorizontalTangent)
Let dSpeed(Speed)
dSpeed=myHorizontalTangent->GetSpeed()

              or,

Let myHorizontalClothoid(AECHorizontalClothoid)
Let dSpeed(Speed)
dSpeed=myHorizontalClothoid->GetSpeed(),

              or,

Let myHorizontalTransition(AECHorizontalTransition)
Let dSpeed(Speed)
dSpeed=myHorizontalTransition->GetSpeed(),

              or,

Let myVerticalTransition(AECVerticalTransition)
Let dSpeed(Speed)
dSpeed=myVerticalTransition->GetSpeed()\n";

CATKnowledge.GetListOfEventPoints.Description="<p>检索水平或垂直线路的事件点列表。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>水平或垂直线路<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 事件点列表。<//p>";
CATKnowledge.GetListOfEventPoints.Sample="Let myHA(AECAlignment2DHorizontal)
Let myListOfEventPoints(List)
myListOfEventPoints = myHA.GetListOfEventPoints()

              or,

Let myVA(AECAlignment2DVertical)
Let myListOfEventPoints(List)
myListOfEventPoints = myVA.GetListOfEventPoints()\n";

CATKnowledge.GetFlow.Description="<p>在水平道路线路的给定曲线上检索水流速度（以 m3/s 为单位）。\n线路几何图形应位于轮廓上，并且应该是排水元素。\n<br />\n<br />                                                    or,\n<br />\n<br />此方法返回此水平线路切线截面开始处的水流速度。单位 m3/s。\n<br />\n<br />                                                    或，\n<br />\n<br />该方法返回沿水平线路一定距离处的水流速度。单位 m3/s。\n<span style=\"font-size:12px;\"></span><//p>\n<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>\n<p>点 (AECAlignmentPoint) 或线路几何图形：水平线路 (Alignment2DHorizontal) 或水平切线 (AECHorizontalTangent) 或水平圆弧 (AECHorizontalArc)<//p>\n<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>\n<p>- 给定点或水平线路或给定线路几何图形起点的特定距离处的水流速度。<//p>";
CATKnowledge.GetFlow.Sample="Let myHorizontalAlignment(AECAlignment2DHorizontal)
Let dFlow(Flow)
Let dDistance(Length)
dFlow = myHorizontalAlignment->GetFlow(dDistance)

              or,

Let myHorizontalArc(AECHorizontalArc)
Let dFlow(Flow)
dFlow = myHorizontalArc->GetFlow()

              or,

Let myHorizontalTangent(AECHorizontalTangent)
Let dFlow(Flow)
dFlow = myHorizontalTangent->GetFlow()\n";

CATKnowledge.GetCategory.Description="<p>在水平道路线路的给定曲线上检索道路类别。\n线路几何图形应位于轮廓上，不应是流域元素。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>线路几何图形：Arc(AECHorizontalArc) 或 Point(AECAlignmentPoint)<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回的值：</span><//p><p>- 线路给定几何图形的类别。\n 例如：R80、R60 <//p>";
CATKnowledge.GetCategory.Sample="Let myGeometry(AECHorizontalArc)\nLet Category(String)\nCategory = myGeometry->GetCategory()\n";

CATKnowledge.GetNumberOfLanes.Description="<p>在水平道路线路的给定曲线上检索道路平面数。\n线路几何图形应位于轮廓上，不应是流域元素。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>线路几何图形：Arc(AECHorizontalArc) 或 Point(AECAlignmentPoint)<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回的值：</span><//p><p>- 线路给定几何图形的平面数。<//p>";
CATKnowledge.GetNumberOfLanes.Sample="Let myGeometry(AECHorizontalArc)\nLet NomberOfLanes(Integer)\nNomberOfLanes= myGeometry->NumberOfLanes()\n";

CATKnowledge.GetNextArc.Description="<p>此方法返回给定输入弧的下一个弧。
返回类型表示该弧。如果没有弧，则返回 NULL。<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平弧 (AECHorizontalArc)，<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 下一个弧。<//p>";
CATKnowledge.GetNextArc.Sample="Let myHorizontalArc(AECHorizontalArc)
Let nextArc(Feature)
nextArc=myHorizontalArc->GetNextArc()
Let sNextArc(String)
sNextArc = nextArc.Name
sNextArc = nextArc.PrimaryType.Name\n";

CATKnowledge.GetPreviousArc.Description="<p>此方法返回给定输入弧的上一个弧。
返回类型表示该弧。如果没有弧，则返回 NULL。<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平弧 (AECHorizontalArc)，<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 上一个弧。<//p>";
CATKnowledge.GetPreviousArc.Sample="Let myHorizontalArc(AECHorizontalArc)
Let previousArc(Feature)
previousArc=myHorizontalArc->GetPreviousArc()
Let sPreviousArc(String)
sPreviousArc = previousArc.Name
sPreviousArc = previousArc.PrimaryType.Name\n";

CATKnowledge.GetHorizontalAlignment.Description="<p>从给定几何图形或线路检索水平线路。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>Alignment(AECAlignment)、Arc(AECHorizontalArc) 或 Point(AECAlignmentPoint)<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回的值：</span><//p><p>- 水平线路。<//p>";
CATKnowledge.GetHorizontalAlignment.Sample="Let myObject(AECAlignment) \nLet myHorizontalAlignment(AECAlignment2DHorizontal)\nmyHorizontalAlignment = myObject->GetHorizontalAlignment()\n";

CATKnowledge.GetExtremities.Description="<p>检索水平曲线或垂直曲线的曲线端点。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>水平弧 (AECHorizontalArc) 或垂直弧 (AECVerticalCurve)<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 曲线起点和终点。<//p>";
CATKnowledge.GetExtremities.Sample="Let myCurve(AECHorizontalArc)
Let Extremity1(2DPoint)
Let Extremity2(2DPoint)
myCurve->GetExtremities(Extremity1,Extremity2)
Let sExtremity1(String), sExtremity2(String)
sExtremity1 = Extremity1.Name
sExtremity1 = Extremity1.PrimaryType.Name
sExtremity2 = Extremity2.Name
sExtremity2 = Extremity2.PrimaryType.Name,

              or,

Let myCurve(AECVerticalCurve)
Let Extremity1(AECVerticalAlignmentPoint)
Let Extremity2(AECVerticalAlignmentPoint)
myCurve->GetExtremities(Extremity1,Extremity2)
Let sExtremity1(String), sExtremity2(String)
sExtremity1 = Extremity1.Name
sExtremity1 = Extremity1.PrimaryType.Name
sExtremity2 = Extremity2.Name
sExtremity2 = Extremity2.PrimaryType.Name\n";

CATKnowledge.GetTrackWidth.Description="<p>检索线路轨迹宽度。\n线路应是铁路轮廓。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>水平铁路线路<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回的值：</span><//p><p>- 轨迹宽度。<//p>";
CATKnowledge.GetTrackWidth.Sample="Let myHorizontalAlignment(AECAlignment2DHorizontal)\nLet TrackWidth(LENGTH)\nTrackWidth=myHorizontalAlignment->GetTrackWidth()\n";

CATKnowledge.GetMaximumAllowableCantDeficiency.Description="<p>检索线路允许的最大超高不足。\n线路应是铁路轮廓。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>水平铁路线路<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回的值：</span><//p><p>- 允许的最大超高不足。<//p>";
CATKnowledge.GetMaximumAllowableCantDeficiency.Sample="Let myHorizontalAlignment(AECAlignment2DHorizontal)\nLet MaxDeficiency(LENGTH)\nMaxDeficiency=myHorizontalAlignment->GetMaximumAllowableCantDeficiency()\n";

CATKnowledge.GetMaximumAllowableCantExcess.Description="<p>检索线路允许的最大超高过剩。\n线路应是铁路轮廓。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>水平铁路线路<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回的值：</span><//p><p>- 允许的最大超高过剩。<//p>";
CATKnowledge.GetMaximumAllowableCantExcess.Sample="Let myHorizontalAlignment(AECAlignment2DHorizontal)\nLet MaxExcess(LENGTH)\nMaxExcess=myHorizontalAlignment->GetMaximumAllowableCantExcess()\n";

CATKnowledge.GetMaximumSpeed.Description="<p>检索线路最大速度。\n线路应是铁路轮廓。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>水平铁路线路<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回的值：</span><//p><p>- 最大速度。<//p>";
CATKnowledge.GetMaximumSpeed.Sample="Let myHorizontalAlignment(AECAlignment2DHorizontal)\nLet MaxSpeed(Speed)\nMaxSpeed=myHorizontalAlignment->GetMaximumSpeed()\n";

CATKnowledge.GetMinimumSpeed.Description="<p>检索线路最小速度。\n线路应是铁路轮廓。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>水平铁路线路<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回的值：</span><//p><p>- 轨迹宽度。<//p>";
CATKnowledge.GetMinimumSpeed.Sample="Let myHorizontalAlignment(AECAlignment2DHorizontal)\nLet MinSpeed(Speed)\nMinSpeed=myHorizontalAlignment->GetMinimumSpeed()\n";

CATKnowledge.GetLength.Description="<p>检索水平线路的总长度。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>水平线路<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 线路长度。<//p>";
CATKnowledge.GetLength.Sample="Let myHorizontalAlignment(AECAlignment2DHorizontal)\nLet dLength(LENGTH)\ndLength=myHorizontalAlignment->GetLength()\n";

CATKnowledge.GetDistance.Description="<p>对于给定布点，此方法将检索从水平线路起点开始的累积距离。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>水平线路和布点<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 从线路起点开始的布点距离。它将返回 -1 表示无效布点字符串，而返回 0 表示空白布点字符串<//p>";
CATKnowledge.GetDistance.Sample="Let myHorizontalAlignment(AECAlignment2DHorizontal)\nLet strStation(String)\nLet dDistance(LENGTH)\ndDistance=myHorizontalAlignment->GetDistance(strStation)\n";

CATKnowledge.GetBackLabel.Description="<p>检索沿所选水平
或垂直线路的给定距离的背面标签。它仅在指定距离处的点对应于桩号
方程式时才起作用，否则它将返回空字符串。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">
输入：</span><//p><p>水平线路 (AECAlignment2DHorizontal) 或垂直线路 (AECAlignment2DVertical)，
<//p><p>距离（长度）以米为单位。对于水平线路，它是指沿线路方向的曲线距离
，而对于垂直线路，它是指沿水平轴方向的距离，这只是展开
的水平线路<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回的值：</span><//p><p>- 背面标签。<//p>";
CATKnowledge.GetBackLabel.Sample="Let myHorizontalAlignment(AECAlignment2DHorizontal)
Let dist(LENGTH)
Let backlabel(String)
backlabel=myHorizontalAlignment->GetBackLabel(dist)\n";

CATKnowledge.GetAheadLabel.Description="<p>检索沿所选水平
或垂直线路的给定距离的前面标签。该值有 2 种类型。
<br />如果在指定距离处的点对应于起点或位于桩号方程式中，则
该标签反映桩号方程式中的段。
<br />如果在指定距离处的点对应于桩号方程式的终点或不在桩号
方程式中，则该标签反映该段位置的值。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">
输入：</span><//p><p>水平线路 (AECAlignment2DHorizontal) 或垂直线路 (AECAlignment2DVertical)，
<//p><p>距离（长度）以米为单位。对于水平线路，它是指沿线路方向的曲线距离
，而对于垂直线路，它是指沿水平轴方向的距离，这只是展开
的水平线路<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回的值：</span><//p><p>- 前面标签。<//p>";
CATKnowledge.GetAheadLabel.Sample="Let myHorizontalAlignment(AECAlignment2DHorizontal)
Let dist(LENGTH)
Let aheadlabel(String)
aheadlabel=myHorizontalAlignment->GetAheadLabel(dist)\n";

CATKnowledge.GetBackStation.Description="<p>沿选定水平或垂直线路检索给定距离的后面桩号。它仅在指定距离处的点对应于桩号方程式时才有效，否则返回空字符串。<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>水平线路 (AECAlignment2DHorizontal) 或的垂直线路 (AECAlignment2DVertical)，<//p><p>Distance(LENGTH)（以米为单位）。对于水平线路，它是指沿线路的曲线距离，而对于垂直线路，它是指沿水平轴的距离，这不过是展开的水平线路，<//p>
<p>UnitString(String) 可以是 ft、m 等。这确定桩号字符串的显示单位，<//p>
<p>DisplayTrailingZero(Boolean)，
<br />TRUE：如 12+345.60 <br />FALSE：如 12+345.6，
<//p><p>MaxDecimalPlaces(Integer) <br />0：如 12+346 <br />1：如 12+345.7 <br />2：如 12+345.68
<br />3：如 12+345.679<//p><p><span style=\"font-weight:bold;font-size:12px;\">
返回值：</span><//p><p>- 后面桩号。这不包含标签字符。<//p>";
CATKnowledge.GetBackStation.Sample="Let myHorizontalAlignment(AECAlignment2DHorizontal)
Let dist(LENGTH)
Let strUnit(String)
Let DisplayTrailingZero(Boolean)
Let MaxDecimalPlaces(Integer)
Let backStation(String)
backStation=myHorizontalAlignment->GetBackStation(dist, strUnit, DisplayTrailingZero, MaxDecimalPlaces)";

CATKnowledge.GetAheadStation.Description="<p>沿选定水平或垂直线路检索给定距离的前面桩号。该值可以是 3 种类型。
 <br />如果指定距离处的点对应于桩号方程式的起点，则值为 0+000.000。
 <br />如果指定距离处的点对应于桩号方程中除其终点以外的任何其他点，则相对于桩号方程的起点测量该值。
 <br />如果指定距离处的点不在起点或桩号方程式内，则相对于线路原点的起点测量该值。<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>水平线路 (AECAlignment2DHorizontal) 或垂直线路 (AECAlignment2DVertical)，<//p>
<p>Distance(LENGTH)（以米为单位）。对于水平线路，它是指沿线路的曲线距离，而对于垂直线路，它是指沿水平轴的距离，这不过是展开的水平线路，<//p>
<p>UnitString(String) 可以是 ft、m 等。这确定桩号字符串的显示单位，<//p>
<p>DisplayTrailingZero(Boolean)，<br />TRUE：如 12+345.60 <br />FALSE：如 12+345.6，
<//p><p>MaxDecimalPlaces(Integer) <br />0：如 12+346 <br />1：如 12+345.7 
<br />2：如 12+345.68 <br />3：如 12+345.679<//p><p><span style=\"font-weight:bold;font-size:12px;\">
返回值：</span><//p><p>- 前面桩号。这不包含标签字符。<//p>";
CATKnowledge.GetAheadStation.Sample="Let myHorizontalAlignment(AECAlignment2DHorizontal)
Let dist(LENGTH)
Let strUnit(String)
Let DisplayTrailingZero(Boolean)
Let MaxDecimalPlaces(Integer)
Let aheadStation(String)
aheadStation=myHorizontalAlignment->GetAheadStation(dist, strUnit, DisplayTrailingZero, MaxDecimalPlaces)";

CATKnowledge.GetStationingFrom3D.Description="<p>沿选定线路、水平或 3D 线路检索给定可测量点的桩号。如果该点不位于线路上，则桩号反映偏移值。负偏移值表示该点位于线路左侧，而正偏移值表示该点位于线路右侧。<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>水平线路 (AECAlignment2DHorizontal)、线路 (AECAlignment) 或 3D 线路 (AECAlignment3D)，<//p>
<p>兴趣点，<//p>
<p>UnitString(String) 可以是 ft、m 等。这将确定桩号字符串的显示单位，<//p>
<p>DisplayTrailingZero(Boolean)，<br />TRUE：如 12+345.60 <br />FALSE：如 12+345.6，
<//p><p>MaxDecimalPlaces(Integer) <br />0：如 12+346 <br />1：如 12+345.7 
<br />2：如 12+345.68 <br />3：如 12+345.679<//p><p><span style=\"font-weight:bold;font-size:12px;\">
返回值：</span><//p><p>- 桩号。这不包含标签字符。<//p>";
CATKnowledge.GetStationingFrom3D.Sample="Let myHorizontalAlignment(Feature)
Let point(Feature)
Let strUnit(String)
Let DisplayTrailingZero(Boolean)
Let MaxDecimalPlaces(Integer)
Let station(String)
station=GetStationingFrom3D(myHorizontalAlignment, point, strUnit, DisplayTrailingZero, MaxDecimalPlaces)";

CATKnowledge.GetKeyPointAcronym.Description="<p>此方法将在给定距离返回几何图形关键端点的首字母缩略词。
<br />如果在该距离处其不是几何图形端点类型的关键点，则该方法将返回一个空字符串。线路起点
和线路终点处的几何图形端点不被视为关键点，因此该方法将在起点和终点距离处返回空字符串。
<br />首字母缩略词是硬编码字符串并且组合了几何图形关键端点处左侧和右侧的曲线。
<br />切线的首字母缩略词是 T，圆弧的首字母缩略词是 C，螺线的首字母缩略词是 S。因此，几何图形关键端点的首字母缩略词方案如下所示：
<br /> 切线终点和螺线起点：TS
<br /> 螺线终点和圆弧起点：SC
<br /> 圆弧终点和螺线起点：CS
<br /> 螺线终点和切线起点：ST
<br /> 切线终点和圆弧起点：TC
<br /> 圆弧终点和切线起点：CT
<br /> 螺线终点和螺线起点：SS
<br /> 切线终点和切线起点：TT
<br /> 圆弧终点和圆弧起点：CC
<br /> 圆弧中间：MA
<br /> 反转螺线拐点：PRC
<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平线路 (AECAlignment2DHorizontal)，<//p>
<p>距离 (LENGTH)（以米为单位）。它是指沿线路的曲线距离<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 关键点首字母缩略词。<//p>";
CATKnowledge.GetKeyPointAcronym.Sample="Let myHorizontalAlignment(AECAlignment2DHorizontal)
Let dist(LENGTH)
Let keyPointAcronym(String)
keyPointAcronym=myHorizontalAlignment->GetKeyPointAcronym(dist)\n";

CATKnowledge.GetTraveledWayType.Description="<p>检索行驶路线车道类型，平面或径向。
<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平线路 (AECAlignment2DHorizontal)。<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 行驶路线车道类型枚举值“TraveledWayType_Planar”或“TraveledWayType_Crowned”。<//p>";
CATKnowledge.GetTraveledWayType.Sample="Let myHorizontalAlignment(AECAlignment2DHorizontal)
Let LaneTypeEnum	(TraveledWayTypeEnum)
LaneTypeEnum = myHorizontalAlignment.GetTraveledWayType()\n";

CATKnowledge.GetRotationMode.Description="<p>检索行驶路线旋转模式。
<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平线路 (AECAlignment2DHorizontal).<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 行驶路线旋转模式枚举值“TraveledWayRotationMode_CenterLine”、“TraveledWayRotationMode_InnerEdge”等<//p>";
CATKnowledge.GetRotationMode.Sample="Let myHorizontalAlignment(AECAlignment2DHorizontal)
Let RotationMode	(TraveledWayRotationModeEnum)
RotationMode = myHorizontalAlignment.GetRotationMode()\n";

CATKnowledge.GetAheadCurve.Description="<p>此方法返回该距离前面的曲线的曲线类型。
<br />在某个距离处，该类型可以是曲线或曲线端点。
<br /> 如果是曲线端点：则其为几何图形关键端点。该方法将返回该点右侧该曲线的曲线类型。
<br /> 如果是曲线：该方法将返回曲线在该点处的曲线类型。
<br />
<br />                                                    或者，
<br />
<br />该方法将返回给定输入曲线前面的曲线。返回类型表示曲线类型。
<br />
<br />曲线类型：
<br /> 切线：AECHorizontalTangent
<br /> 圆弧：AECHorizontalArc
<br /> 螺线：AECHorizontalClothoid 或 AECHorizontalTransition 或 AECVerticalTransition
<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平线路 (AECAlignment2DHorizontal)，<//p>
<p>距离 (LENGTH)（以米为单位）。它是指沿线路的曲线距离<//p>
<p>                                     或者，                                             <//p>
<p>水平切线 (AECHorizontalTangent)、水平圆弧 (AECHorizontalArc)、水平回旋曲线 (AECHorizontalClothoid) 或水平过渡 (AECHorizontalTransition) 或垂直过渡 (AECVerticalTransition)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>-前面曲线的曲线类型。<//p>";
CATKnowledge.GetAheadCurve.Sample="Let myHorizontalAlignment(AECAlignment2DHorizontal)
Let dist(LENGTH)
Let aheadCurve(Feature)
aheadCurve=myHorizontalAlignment->GetAheadCurve(dist)
Let sAheadCurve(String)
sAheadCurve = aheadCurve.Name
sAheadCurve = aheadCurve.PrimaryType.Name,

            or,

Let myTangentHA(AECHorizontalTangent)
Let aheadCurve(Feature)
aheadCurve=myTangentHA->GetAheadCurve()
Let sAheadCurve(String)
sAheadCurve = aheadCurve.Name
sAheadCurve = aheadCurve.PrimaryType.Name,

            or,

Let myHorizontalArc(AECHorizontalArc)
Let aheadCurve(Feature)
aheadCurve=myHorizontalArc->GetAheadCurve(),
Let sAheadCurve(String)
sAheadCurve = aheadCurve.Name
sAheadCurve = aheadCurve.PrimaryType.Name,

            or,

Let myHorizontalClothoid(AECHorizontalClothoid)
Let aheadCurve(Feature)
aheadCurve=myHorizontalClothoid->GetAheadCurve()
Let sAheadCurve(String)
sAheadCurve = aheadCurve.Name
sAheadCurve = aheadCurve.PrimaryType.Name,

            or,

Let myHorizontalTransition(AECHorizontalTransition)
Let aheadCurve(Feature)
aheadCurve=myHorizontalTransition->GetAheadCurve()
Let sAheadCurve(String)
sAheadCurve = aheadCurve.Name
sAheadCurve = aheadCurve.PrimaryType.Name,

            or,

Let myVerticalTransition(AECVerticalTransition)
Let aheadCurve(Feature)
aheadCurve=myVerticalTransition->GetAheadCurve()
Let sAheadCurve(String)
sAheadCurve = aheadCurve.Name
sAheadCurve = aheadCurve.PrimaryType.Name\n";

CATKnowledge.GetBackCurve.Description="<p>此方法返回该距离后面的曲线的曲线类型。
<br />在某个距离处，该类型可以是曲线或曲线端点。
<br /> 如果是曲线端点：则其为几何图形关键端点。该方法将返回该点左侧该曲线的曲线类型。
<br /> 如果是曲线：该方法将返回曲线在该点处的曲线类型。
<br />
<br />                                                    或者，
<br />
<br />该方法将返回给定输入曲线后面的曲线。返回类型表示曲线类型。
<br />
<br />曲线类型：
<br /> 切线：AECHorizontalTangent
<br /> 圆弧：AECHorizontalArc
<br /> 螺线：AECHorizontalClothoid 或 AECHorizontalTransition 或 AECVerticalTransition
<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平线路 (AECAlignment2DHorizontal)，<//p>
<p>距离 (LENGTH)（以米为单位）。它是指沿线路的曲线距离<//p>
<p>                                     或者，                                             <//p>
<p>水平切线 (AECHorizontalTangent)、水平圆弧 (AECHorizontalArc)、水平回旋曲线 (AECHorizontalClothoid) 或水平过渡 (AECHorizontalTransition) 或垂直过渡 (AECVerticalTransition)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>-后面曲线的曲线类型。<//p>";
CATKnowledge.GetBackCurve.Sample="Let myHorizontalAlignment(AECAlignment2DHorizontal)
Let dist(LENGTH)
Let backCurve(Feature)
backCurve=myHorizontalAlignment->GetBackCurve(dist)
Let sBackCurve(String)
sBackCurve = backCurve.Name
sBackCurve = backCurve.PrimaryType.Name,

            or,

Let myTangentHA(AECHorizontalTangent)
Let backCurve(Feature)
backCurve=myTangentHA->GetBackCurve()
Let sBackCurve(String)
sBackCurve = backCurve.Name
sBackCurve = backCurve.PrimaryType.Name,

            or,

Let myHorizontalArc(AECHorizontalArc)
Let backCurve(Feature)
backCurve=myHorizontalArc->GetBackCurve()
Let sBackCurve(String)
sBackCurve = backCurve.Name
sBackCurve = backCurve.PrimaryType.Name,

            or,

Let myHorizontalClothoid(AECHorizontalClothoid)
Let backCurve(Feature)
backCurve=myHorizontalClothoid->GetBackCurve()
Let sBackCurve(String)
sBackCurve = backCurve.Name
sBackCurve = backCurve.PrimaryType.Name,

            or,

Let myHorizontalTransition(AECHorizontalTransition)
Let backCurve(Feature)
backCurve=myHorizontalTransition->GetBackCurve()
Let sBackCurve(String)
sBackCurve = backCurve.Name
sBackCurve = backCurve.PrimaryType.Name

            or,

Let myVerticalTransition(AECVerticalTransition)
Let backCurve(Feature)
backCurve=myVerticalTransition->GetBackCurve()
Let sBackCurve(String)
sBackCurve = backCurve.Name
sBackCurve = backCurve.PrimaryType.Name\n";

CATKnowledge.GetConfiguration.Description="<p>此方法返回以“T”、“S”和“C”表示的两条切线之间的线路轮廓截面的配置。
<br />这可以是各种类型，
<br />对于简单：TCT、TSCST、TCST、TSCT
<br />对于复合：TCCT、TCSCT、TSCCCST...
<br />对于反转：TCCT、TSCCT、TCCST、
<br />              TCSCT、TSCSCT、TCSCST、TSCSCST、
<br />              TCSSCT、TSCSSCT、TCSSCST、TSCSSCST
<br />曲线类型：
<br /> 曲线：AECHorizontalArc 或 AECVerticalCurve
<br /> 螺线：AECHorizontalTransition 或 AECVerticalTransition
<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平圆弧 (AECHorizontalArc) 或垂直曲线 (AECVerticalCurve) 或水平过渡 (AECHorizontalTransition) 或垂直过渡 (AECVerticalTransition)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>-指定曲线所属的两条切线之间的线路轮廓截面的配置。<//p>";
CATKnowledge.GetConfiguration.Sample="Let myHorizontalArc(AECHorizontalArc)
Let sConfig(String)
sConfig=myHorizontalArc.GetConfiguration(),

            or,

Let myVerticalCurve(AECVerticalCurve)
Let sConfig(String)
sConfig=myVerticalCurve.GetConfiguration(),

            or,

Let myHorizontalTransition(AECHorizontalTransition)
Let sConfig(String)
sConfig=myHorizontalTransition.GetConfiguration(),

            or,

Let myVerticalTransition(AECVerticalTransition)
Let sConfig(String)
sConfig=myVerticalTransition.GetConfiguration()\n";

CATKnowledge.GetRadius.Description="<p>此方法返回长度尺寸中的曲线段半径：
<br />1 - 沿水平线路曲线在给定距离处的曲线段。
<br />      如果给定距离对应于几何图形关键端点，则将通过以下方案返回半径：
<br />      其中一条曲线段为切线，另一条为圆弧（TC、CT）：圆弧的半径
<br />      其中一条曲线段为切线，另一条为螺线（TS、ST）：-1
<br />      其中一条曲线段为圆弧，另一条为螺线（SC、CS）：圆弧的半径
<br />      两条曲线段都是圆弧 (CC)：左侧圆弧的半径
<br />      两条曲线段都是螺线 (SS)：左侧螺线的半径
<br />      两条曲线段都是切线 (TT)：-1.000
<br />
<br />      如果给定距离对应于曲线段，则遵循以下方案：
<br />      圆弧：圆弧的半径
<br />      螺线：螺线的半径
<br />      切线：-1.000
<br />
<br />      如果给定距离对应于线路起点，则将根据上述方案返回第一条线段的半径
<br />      如果给定距离对应于线路终点，则将根据上述方案返回最后一条线段的半径
<br />
<br />                                          或者
<br />
<br />2 - 水平圆弧线段。
<br />
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平线路 (AECAlignment2DHorizontal)，<//p>
<p>距离 (LENGTH)（以米为单位）。它是指沿线路的曲线距离，<//p>
<p>             或者              <//p>
<p>水平圆弧 (AECHorizontalArc)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 长度尺寸中的半径。<//p>";
CATKnowledge.GetRadius.Sample="Let myHorizontalAlignment(AECAlignment2DHorizontal)
Let dist(LENGTH)
Let radius(LENGTH)
radius=myHorizontalAlignment->GetRadius(dist),

          or

Let myHorizontalArc(AECHorizontalArc)
Let radius(LENGTH)
radius=myHorizontalArc->GetRadius()\n";

CATKnowledge.GetCurvilinearLength.Description="<p>此方法返回水平线路切线、回旋曲线、过渡、弧段或垂直线路中的过渡的曲线长度。
它返回 LENGTH 尺寸中的曲线长度。
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平切线 (AECHorizontalTangent) 或水平圆弧 (AECHorizontalArc) 或水平or Horizontal 回旋曲线 (AECHorizontalClothoid)
    或水平过渡 (AECHorizontalTransition) 或垂直过渡 (AECVerticalTransition)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- LENGTH 尺寸的曲线长度。<//p>";
CATKnowledge.GetCurvilinearLength.Sample="Let myTangentHA(AECHorizontalTangent)
Let dlength(LENGTH)
dlength=myTangentHA->GetCurvilinearLength(),

            or,

Let myHorizontalArc(AECHorizontalArc)
Let dlength(LENGTH)
dlength=myHorizontalArc->GetCurvilinearLength(),

            or,

Let myHorizontalClothoid(AECHorizontalClothoid)
Let dlength(LENGTH)
dlength=myHorizontalClothoid->GetCurvilinearLength(),

            or,

Let myHorizontalTransition(AECHorizontalTransition)
Let dlength(LENGTH)
dlength=myHorizontalTransition->GetCurvilinearLength(),

            or,

Let myVerticalTransition(AECVerticalTransition)
Let dlength(LENGTH)
dlength=myVerticalTransition->GetCurvilinearLength()\n";

CATKnowledge.GetCentralAngle.Description="<p>此方法返回水平圆弧、水平回旋曲线或水平过渡包住的中心角度。它返回角度尺寸中的中心角度。
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平圆弧 (AECHorizontalArc)、水平回旋曲线 (AECHorizontalClothoid) 或水平过渡 (AECHorizontalTransition)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 角度尺寸中的中心角度。<//p>";
CATKnowledge.GetCentralAngle.Sample="Let myHorizontalArc(AECHorizontalArc)
Let dAngle(ANGLE)
dAngle=myHorizontalArc->GetCentralAngle()

              or,

Let myHorizontalClothoid(AECHorizontalClothoid)
Let dAngle(ANGLE)
dAngle=myHorizontalClothoid->GetCentralAngle(),

              or,

Let myHorizontalTransition(AECHorizontalTransition)
Let dAngle(ANGLE)
dAngle=myHorizontalTransition->GetCentralAngle()\n";

CATKnowledge.GetTransitionCentralAngle.Description="<p>此方法返回表示在切线-曲线-切线或切线-螺线-曲线-螺线-切线截面上水平圆弧的切线截面之间的偏转角度的角度。对于切线-曲线-切线截面，它与水平圆弧包住的中心角度相同。它将返回角度尺寸中的过渡中心角度。
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平圆弧 (AECHorizontalArc)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 角度尺寸中的过渡中心角度。<//p>";
CATKnowledge.GetTransitionCentralAngle.Sample="Let myHorizontalArc(AECHorizontalArc)
Let dAngle(ANGLE)
dAngle=myHorizontalArc->GetTransitionCentralAngle()\n";

CATKnowledge.GetDegreeOfCurvature.Description="<p>该方法返回用于土木工程的圆弧曲率测量角度，便于布局测量。
它定义为商定长度弧或弦两端的中心角度。
它返回角度尺寸中的曲率。
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>Horizontal Arc (AECHorizontalArc)<//p>
<p>要考虑的弧或弦的长度 (LENGTH)，<//p>
<p>UnitString（字符串）可以是英尺、米等，<//p>
<p>模式（整数）。选项为 1 或 2。
<br />选项 1：弧模式。在此选项中，长度将被视为弧长
<br />选项 2：弦模式。在此选项中，长度将被视为弦长。<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 角度尺寸中的曲率。<//p>";
CATKnowledge.GetDegreeOfCurvature.Sample="Let myHorizontalArc(AECHorizontalArc)
Let dAngle(ANGLE)
dAngle=myHorizontalArc->GetDegreeOfCurvature()\n";

CATKnowledge.GetActualCant.Description="<p>此方法返回铁路线路的水平圆弧的超高，它是两条铁路或边线之间标高（高度）的变化速率。
  它与道路线路无关。它返回长度尺寸中的超高。
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平圆弧 (AECHorizontalArc)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 长度尺寸中的超高。<//p>";
CATKnowledge.GetActualCant.Sample="Let myHorizontalArc(AECHorizontalArc)
Let dCant(LENGTH)
dCant=myHorizontalArc->GetActualCant()\n";

CATKnowledge.GetEquilibriumCant.Description="<p>此方法返回铁路线路的水平圆弧的平衡超高，它是超高的理论值。目前，使用 CATRule 而非表对其进行赋值。将针对超高规则返回值，其中公式将设置为“法国”、“中国”或超高不足。默认返回 0 值。之后可再次访问该值。它与道路线路无关。它返回长度尺寸中的超高。
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平圆弧 (AECHorizontalArc)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 长度尺寸中的非平衡超高。<//p>";
CATKnowledge.GetEquilibriumCant.Sample="Let myHorizontalArc(AECHorizontalArc)
Let dCant(LENGTH)
dCant=myHorizontalArc->GetEquilibriumCant()\n";

CATKnowledge.GetFullSuperElevation.Description="<p>此方法返回道路线路的水平圆弧的超高，这是横向坡度，用于抵消离心力的影响，并通过相对于内边线升高路面外边线来减少车辆翻车和横向滑出的趋势。这与铁路线路无关。它返回角度尺寸中的超高。
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平圆弧 (AECHorizontalArc)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 角度尺寸中的完整超高。<//p>";
CATKnowledge.GetFullSuperElevation.Sample="Let myHorizontalArc(AECHorizontalArc)
Let dAngle(ANGLE)
dAngle=myHorizontalArc->GetFullSuperElevation()\n";

CATKnowledge.GetAzimuth.Description="<p>此方法返回选定水平切线的方位角。产品匹配项应为直接保留包含检索其方位角的切线的 3DShape 的项目。应地理定位此产品匹配项或其直至根匹配项的某个父匹配项。将根据提供的产品匹配项或导航树时找到的要地理定位的第一个产品匹配项进行计算。它将考虑产品方位角并添加选定切线与局部北向形成的角。它返回角度尺寸中的方位角。
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平切线 (AECHorizontalTangent) 和产品匹配项 (ProductOccurrence)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 角度尺寸中的方位角。<//p>";
CATKnowledge.GetAzimuth.Sample="Let myHorizontalTangent(AECHorizontalTangent)
Let myProdOcc(ProductOccurrence)
Let dAngle(ANGLE)
dAngle=myHorizontalTangent->GetAzimuth(myProdOcc)\n";

CATKnowledge.GetPIStationing.Description="<p>此方法返回水平弧的 PI 点的桩号值。这是通过将 PI 的传入切线长度与沿线路的切线点的曲线距离相加来计算得出的。
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平弧 (AECHorizontalArc)<//p>
<p>UnitString(String) 可以是 ft、m 等。这将确定桩号字符串的显示单位，<//p>
<p>DisplayTrailingZero(Boolean)，<br />TRUE：如 12+345.60 <br />FALSE：如 12+345.6，
<//p><p>MaxDecimalPlaces(Integer) <br />0：如 12+346 <br />1：如 12+345.7
<br />2：如 12+345.68 <br />3：如 12+345.679<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 字符串类型的桩号值。<//p>";
CATKnowledge.GetPIStationing.Sample="Let myHorizontalArc(AECHorizontalArc)
Let sPIStation(String)
Let strUnit(String)
Let DisplayTrailingZero(Boolean)
Let MaxDecimalPlaces(Integer)
sPIStation=myHorizontalArc->GetPIStationing(strUnit, DisplayTrailingZero, MaxDecimalPlaces)\n";

CATKnowledge.GetApexLength.Description="<p>此方法返回顶点长度，即 PI 投影到水平弧的距离。它返回长度尺寸中的切线长度。
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平弧 (AECHorizontalArc)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 长度尺寸中的顶点长度。<//p>";
CATKnowledge.GetApexLength.Sample="Let myHorizontalArc(AECHorizontalArc)
Let dlength(LENGTH)
dlength=myHorizontalArc->GetApexLength()\n";

CATKnowledge.GetDirection.Description="<p>此方法返回弧方向，即弧向左还是向右转。
它得到了从弧开始到弧结束的方向变化。
正角度解释为右转，负角度解释为左转。
它返回字符串尺寸中的方向。
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平弧 (AECHorizontalArc)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 字符串尺寸中的方向。<//p>";
CATKnowledge.GetDirection.Sample="Let myHorizontalArc(AECHorizontalArc)
Let strDirection(String)
strDirection=myHorizontalArc->GetDirection()\n";

CATKnowledge.GetTangentLength.Description="<p>此方法返回输入切线与水平圆弧 PI 点之间的长度。它返回长度尺寸中的切线长度。
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平圆弧 (AECHorizontalArc)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 长度尺寸中的切线长度。<//p>";
CATKnowledge.GetTangentLength.Sample="Let myHorizontalArc(AECHorizontalArc)
Let dlength(LENGTH)
dlength=myHorizontalArc->GetTangentLength()\n";

CATKnowledge.GetOutTangentEntryToPreviousPILength.Description="<p>此方法返回输出切线与水平圆弧 PI 点之间的长度。它返回长度尺寸中的切线长度。
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平圆弧 (AECHorizontalArc)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 长度尺寸中的切线长度。<//p>";
CATKnowledge.GetOutTangentEntryToPreviousPILength.Sample="Let myHorizontalArc(AECHorizontalArc)
Let dlength(LENGTH)
dlength=myHorizontalArc->GetOutTangentEntryToPreviousPILength()\n";

CATKnowledge.GetTraveledWayLaneDistribution.Description="<p>检索道路线路车道分布的列表。
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平弧 (AECHorizontalArc)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 左侧车道分布的列表。
<br />- 中间车道分布的列表。
<br />- 右侧车道分布的列表。<//p>";
CATKnowledge.GetTraveledWayLaneDistribution.Sample="Let myHorizontalArc(AECHorizontalArc)
Let ListLeftLane	(List)
Let ListCenterLane	(List)
Let ListRightLane	(List)
myHorizontalArc->GetTraveledWayLaneDistribution(ListLeftLane, ListCenterLane, ListRightLane)\n";

CATKnowledge.GetCurvilinearDistance.Description="<p>此方法返回水平线路时该点与水平线路曲线起点之间的曲线距离。它返回长度尺寸中的曲线距离。
对于未线路的点，此方法返回水平线路时投影点的曲线距离。
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>线路点 (AECAlignmentPoint)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 长度尺寸中的曲线距离。<//p>";
CATKnowledge.GetCurvilinearDistance.Sample="Let myPoint(AECAlignmentPoint)
Let dlength(LENGTH)
dlength=myPoint->GetCurvilinearDistance()";

CATKnowledge.GetInfrastructureType.Description="<p>检索水平或垂直事件点的基础结构类型。<span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>线路点 (AECAlignmentPoint) 或垂直线路点 (AECVerticalAlignmentPoint)<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 地面、桥梁、隧道或水坝。<//p>";
CATKnowledge.GetInfrastructureType.Sample="Let myPoint(AECAlignmentPoint)
Let InfraType(InfrastructureTypeEnum)
InfraType = myPoint.GetInfrastructureType()

                    or,


Let myPoint(AECVerticalAlignmentPoint)
Let InfraType(InfrastructureTypeEnum)
InfraType = myPoint.GetInfrastructureType()\n";

CATKnowledge.GetShortTangentLength.Description="<p>此方法返回相交形成 PI 点的回旋曲线或过渡的起点和终点处两条切线中较短者的长度。它返回长度尺寸中的值。
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平回旋曲线 (AECHorizontalClothoid) 或水平过渡 (AECHorizontalTransition)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 长度尺寸中的切线长度。<//p>";
CATKnowledge.GetShortTangentLength.Sample="Let myHorizontalClothoid(AECHorizontalClothoid)
Let dlength(LENGTH)
dlength=myHorizontalClothoid->GetShortTangentLength(),

                    or,

Let myHorizontalTransition(AECHorizontalTransition)
Let dlength(LENGTH)
dlength=myHorizontalTransition->GetShortTangentLength()\n";

CATKnowledge.GetLongTangentLength.Description="<p>此方法返回相交形成 PI 点的回旋曲线或过渡的起点和终点处两条切线中较长者的长度。它返回长度尺寸中的值。
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平回旋曲线 (AECHorizontalClothoid) 或水平过渡 (AECHorizontalTransition)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 长度尺寸中的切线长度。<//p>";
CATKnowledge.GetLongTangentLength.Sample="Let myHorizontalClothoid(AECHorizontalClothoid)
Let dlength(LENGTH)
dlength=myHorizontalClothoid->GetLongTangentLength(),

                    or,

Let myHorizontalTransition(AECHorizontalTransition)
Let dlength(LENGTH)
dlength=myHorizontalTransition->GetLongTangentLength()\n";

CATKnowledge.GetLengthAlongTangent.Description="<p>此方法通过 TS 至 SC 或 CS 至 ST 返回距离，并通过 TS 或 ST 平行于切线进行测量。这适用于回旋曲线或过渡一侧具有切线而另一侧具有圆弧的情况。它不适用于具有两条圆弧的回旋曲线或过渡或反转螺线。它返回长度尺寸中的值。
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平回旋曲线 (AECHorizontalClothoid) 或水平过渡 (AECHorizontalTransition)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 长度尺寸中的距离。<//p>";
CATKnowledge.GetLengthAlongTangent.Sample="Let myHorizontalClothoid(AECHorizontalClothoid)
Let dlength(LENGTH)
dlength=myHorizontalClothoid->GetLengthAlongTangent(),

                    or,

Let myHorizontalTransition(AECHorizontalTransition)
Let dlength(LENGTH)
dlength=myHorizontalTransition->GetLengthAlongTangent()\n";

CATKnowledge.GetLengthNormalToTangent.Description="<p>此方法通过 TS 至 SC 或 CS 至 ST 返回距离，并通过 TS 或 ST 垂直于切线进行测量。这适用于回旋曲线或过渡一侧具有切线而另一侧具有圆弧的情况。它不适用于具有两条圆弧的回旋曲线或过渡或反转螺线。它返回长度尺寸中的值。
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平回旋曲线 (AECHorizontalClothoid) 或水平过渡 (AECHorizontalTransition)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 长度尺寸中的距离。<//p>";
CATKnowledge.GetLengthNormalToTangent.Sample="Let myHorizontalClothoid(AECHorizontalClothoid)
Let dlength(LENGTH)
dlength=myHorizontalClothoid->GetLengthNormalToTangent(),

                    or,

Let myHorizontalTransition(AECHorizontalTransition)
Let dlength(LENGTH)
dlength=myHorizontalTransition->GetLengthNormalToTangent()\n";

CATKnowledge.GetOffsetOfCircularCurveFromTangent.Description="<p>此方法返回在与 TS 或 ST 一定的距离上，投影圆弧与切线的偏移量，并通过 TS 或 ST 垂直于切线进行测量。
这适用于回旋曲线或过渡一侧具有切线而另一侧具有圆弧的情况。
它不适用于具有两条圆弧的回旋曲线或过渡或反转螺线。
它返回长度尺寸中的值。
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平回旋曲线 (AECHorizontalClothoid) 或水平过渡 (AECHorizontalTransition)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 长度尺寸中的距离。<//p>";
CATKnowledge.GetOffsetOfCircularCurveFromTangent.Sample="Let myHorizontalClothoid(AECHorizontalClothoid)
Let dlength(LENGTH)
dlength=myHorizontalClothoid->GetOffsetOfCircularCurveFromTangent(),

                    or,

Let myHorizontalTransition(AECHorizontalTransition)
Let dlength(LENGTH)
dlength=myHorizontalTransition->GetOffsetOfCircularCurveFromTangent()\n";

CATKnowledge.GetTStoArcCenterDistanceAlongTangent.Description="<p>此方法返回从 TS 或 ST 到圆弧投影的切线与通过 TS 或 ST 的切线平行的点的距离。
这适用于回旋曲线或过渡一侧具有切线而另一侧具有圆弧的情况。
它不适用于具有两条圆弧的回旋曲线或过渡或反转螺线。
它返回长度尺寸中的值。
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平回旋曲线 (AECHorizontalClothoid) 或水平过渡 (AECHorizontalTransition)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 长度尺寸中的距离。<//p>";
CATKnowledge.GetTStoArcCenterDistanceAlongTangent.Sample="Let myHorizontalClothoid(AECHorizontalClothoid)
Let dlength(LENGTH)
dlength=myHorizontalClothoid->GetTStoArcCenterDistanceAlongTangent(),

                    or,

Let myHorizontalTransition(AECHorizontalTransition)
Let dlength(LENGTH)
dlength=myHorizontalTransition->GetTStoArcCenterDistanceAlongTangent()\n";

CATKnowledge.GetRadiusAtStart.Description="<p>此方法返回说和垂直过渡起点处的半径。
如果在起点处有一个圆，则返回圆的半径；如果有一条切线，则返回 -1。<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平回旋曲线 (AECHorizontalClothoid) 或水平过渡 (AECHorizontalTransition) 或垂直过渡 (AECVerticalTransition)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- LENGTH 尺寸中的半径。<//p>";
CATKnowledge.GetRadiusAtStart.Sample="Let myHorizontalClothoid(AECHorizontalClothoid)
Let dRadius(LENGTH)
dRadius=myHorizontalClothoid->GetRadiusAtStart(),

                    or,

Let myHorizontalTransition(AECHorizontalTransition)
Let dRadius(LENGTH)
dRadius=myHorizontalTransition->GetRadiusAtStart(),

                    or,

Let myVerticalTransition(AECVerticalTransition)
Let dRadius(LENGTH)
dRadius=myVerticalTransition->GetRadiusAtStart()\n";

CATKnowledge.GetRadiusAtEnd.Description="<p>此方法返回水平和垂直过渡终点处的半径。
如果终点处有一个圆，则返回圆的半径；如果有一条切线，则返回 -1。<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平回旋曲线 (AECHorizontalClothoid) 或水平过渡 (AECHorizontalTransition) 或垂直过渡 (AECVerticalTransition)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- LENGTH 尺寸中的半径。<//p>";
CATKnowledge.GetRadiusAtEnd.Sample="Let myHorizontalClothoid(AECHorizontalClothoid)
Let dRadius(LENGTH)
dRadius=myHorizontalClothoid->GetRadiusAtEnd(),

                    or,

Let myHorizontalTransition(AECHorizontalTransition)
Let dRadius(LENGTH)
dRadius=myHorizontalTransition->GetRadiusAtEnd(),

                    or,

Let myVerticalTransition(AECVerticalTransition)
Let dRadius(LENGTH)
dRadius=myVerticalTransition->GetRadiusAtEnd()\n";

CATKnowledge.GetSpiralA.Description="<p>此方法返回水平和垂直过渡的回旋曲线常量 A。
此参数决定沿回旋曲线或过渡的曲率变化率。<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平回旋曲线 (AECHorizontalClothoid) 或水平过渡 (AECHorizontalTransition) 或垂直过渡 (AECVerticalTransition)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- LENGTH 尺寸中的螺旋常量 A。<//p>";
CATKnowledge.GetSpiralA.Sample="Let myHorizontalClothoid(AECHorizontalClothoid)
Let dSpiralA(LENGTH)
dSpiralA=myHorizontalClothoid->GetSpiralA(),

                    or,

Let myHorizontalTransition(AECHorizontalTransition)
Let dSpiralA(LENGTH)
dSpiralA=myHorizontalTransition->GetSpiralA(),

                    or,

Let myVerticalTransition(AECVerticalTransition)
Let dSpiralA(LENGTH)
dSpiralA=myVerticalTransition->GetSpiralA()\n";

CATKnowledge.GetDistance.Description="<p>T此方法返回垂直线路点的距离。
此距离对应于从曲线起点处展开的水平线路的距离。
它返回长度尺寸中的曲线距离。
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>垂直线路点 (AECVerticalAlignmentPoint)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 长度尺寸中的距离。<//p>";
CATKnowledge.GetDistance.Sample="Let myPoint(AECVerticalAlignmentPoint)
Let dlength(LENGTH)
dlength=myPoint->GetDistance()";

CATKnowledge.GetLeftTraveledWayWidth.Description="<p>检索给定线路点的左道宽度。
此宽度是所有单独左道宽度和中道（如有）宽度一半的总和。
<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>线路点 (AECAlignmentPoint)。<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 长度尺寸中的宽度。<//p>";
CATKnowledge.GetLeftTraveledWayWidth.Sample="Let myPoint(AECAlignmentPoint)
Let Width(LENGTH)
Width = myPoint.GetLeftTraveledWayWidth()\n";

CATKnowledge.GetRightTraveledWayWidth.Description="<p>检索给定线路点的右道宽度。
此宽度是所有单独右道宽度和中道（如有）宽度一半的总和。
<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>线路点 (AECAlignmentPoint)。<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 长度尺寸中的宽度。<//p>";
CATKnowledge.GetRightTraveledWayWidth.Sample="Let myPoint(AECAlignmentPoint)
Let Width(LENGTH)
Width = myPoint.GetRightTraveledWayWidth()\n";

CATKnowledge.GetGeolocatedCartesianCoordinates.Description="<p>检索指定输入点和地理定位产品匹配项的地理定位直角坐标。点类型可以是 GSM 点、线路点、极值点、地理定位点或 3Dpk 点。产品匹配项应为直接保留包含检索其地理定位坐标的点的 3DShape 的项目。应地理定位此产品匹配项或其直至根匹配项的某个父匹配项。将根据提供的产品匹配项或导航树时找到的要地理定位的第一个产品匹配项进行计算。它返回长度尺寸中的地理定位直角坐标。
<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>产品匹配项 (ProductOccurrence) 和点 (Point)。<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 长度尺寸中的地理定位直角坐标。<//p>";
CATKnowledge.GetGeolocatedCartesianCoordinates.Sample="Let myProdOcc(ProductOccurrence)
Let myPoint(Point)
Let xCoord(LENGTH)
Let yCoord(LENGTH)
Let zCoord(LENGTH)
GetGeolocatedCartesianCoordinates(myProdOcc, myPoint, xCoord, yCoord, zCoord)\n";

CATKnowledge.GetGeolocatedGeographicalCoordinates.Description="<p>检索指定输入点和地理定位产品匹配项的地理定位地理坐标。点类型可以是 GSM 点、线路点、极值点、地理定位点或 3Dpk 点。产品匹配项应为直接保留包含检索其地理定位坐标的点的 3DShape 的项目。应地理定位此产品匹配项或其直至根匹配项的某个父匹配项。将根据提供的产品匹配项或导航树时找到的要地理定位的第一个产品匹配项进行计算。它返回角度尺寸中的地理定位地理横坐标和纵坐标以及长度尺寸中的标高坐标。
<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>产品匹配项 (ProductOccurrence) 和点 (Point)。<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 角度和长度尺寸中的地理定位地理坐标。<//p>";
CATKnowledge.GetGeolocatedGeographicalCoordinates.Sample="Let myProdOcc(ProductOccurrence)
Let myPoint(Point)
Let latitude(ANGLE)
Let longitude(ANGLE)
Let elevation(LENGTH)
GetGeolocatedGeographicalCoordinates(myProdOcc, myPoint, latitude, longitude, elevation)\n";

CATKnowledge.GetNormalSlope.Description="<p>检索给定线路点的法向坡度值。
<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>线路点 (AECAlignmentPoint) 或水平线路 (AECAlignment2DHorizontal)。<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 角度尺寸中的法向坡度。<//p>";
CATKnowledge.GetNormalSlope.Sample="Let myPoint(AECAlignmentPoint)
Let NormalSlope(Angle)
NormalSlope = myPoint.GetNormalSlope()

or 

Let myHorizontalAlignment(AECAlignment2DHorizontal)
Let NormalSlope(Angle)
NormalSlope = myHorizontalAlignment.GetNormalSlope()\n";

CATKnowledge.GetWidth.Description="<p>检索车道类型的宽度。
<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>车道类型 (AECLaneType)。<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 长度尺寸中的车道宽度。<//p>";
CATKnowledge.GetWidth.Sample="Let myLane(AECLaneType)
Let width (LENGTH)
width = myLane.GetWidth()\n";

CATKnowledge.GetLateralClearance.Description="<p>检索车道类型的横向间隙值。
<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>车道类型 (AECLaneType)。<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 长度尺寸中的车道横向间隙。<//p>";
CATKnowledge.GetLateralClearance.Sample="Let myLane(AECLaneType)
Let lateralClearance (LENGTH)
lateralClearance = myLane.GetLateralClearance()\n";

CATKnowledge.GetTravelingDirection.Description="<p>检索行驶路线方向：无、单向或双向。
<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>车道类型 (AECLaneType)。<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 车道方向枚举值“LaneDirection_None”、“LaneDirection_OneWay”或“LaneDirection_TwoWays”。<//p>";
CATKnowledge.GetTravelingDirection.Sample="Let myLane(AECLaneType)
Let LaneDirEnum	(LaneDirectionEnum)
LaneDirEnum = myLane.GetTravelingDirection()\n";

CATKnowledge.GetDesignVehicles.Description="<p>检索车道设计车辆列表。
<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>车道类型 (AECLaneType)。<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 列表尺寸中的车道设计车辆列表。<//p>";
CATKnowledge.GetDesignVehicles.Sample="Let myLane(AECLaneType)
Let listDesignVehicles (list)
listDesignVehicles = myLane.GetDesignVehicles()\n";

CATKnowledge.GetSweptPathWidth.Description="<p>检索给定车辆的扫掠路径。
<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>车辆类型 (AECVehicleType)。<//p>
<p>以毫米为单位的弧半径 (LENGTH)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 长度尺寸中的车辆扫掠路径。<//p>";
CATKnowledge.GetSweptPathWidth.Sample="Let myVehicle(AECVehicleType)
Let sweptPath (LENGTH)
sweptPath = myVehicle.GetSweptPathWidth()\n";

CATKnowledge.GetFrontOverhangWidth.Description="<p>检索给定车辆的前悬距。
<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>车辆类型 (AECVehicleType)。<//p>
<p>以毫米为单位的弧半径 (LENGTH)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 长度尺寸中的车辆前悬距。<//p>";
CATKnowledge.GetFrontOverhangWidth.Sample="Let myVehicle(AECVehicleType)
Let frontOverhang (LENGTH)
frontOverhang = myVehicle.GetFrontOverhangWidth()\n";

CATKnowledge.GetDirectlyRelatedHorizontalAlignments.Description="<p>检索属于同一系列的子-父或同级水平线路的相关线路。
仅当输入水平线路具有使用平行线路命令创建的其他水平线路时，此项才可用。
在本例中，将检索相关线路和关系。
关系将为 ParallelAlignmentRelationshipTypeEnum，且可能值可为 0-Father、1-Child 或 2-Sibling。
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平线路 (AECAlignment2DHorizontal)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 相关水平线路的列表。
<br />- 相关水平线路的关系类型的对应列表。<//p>";
CATKnowledge.GetDirectlyRelatedHorizontalAlignments.Sample="Let myHorizontalAlignment(AECAlignment2DHorizontal)
Let ListHA	(List)
Let ListRelationship (List)
myHorizontalAlignment->GetDirectlyRelatedHorizontalAlignments(ListHA, ListRelationship)\n";

CATKnowledge.GetVerticalAlignments.Description="<p>从输入水平线路检索相关垂直线路。
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平线路 (AECAlignment2DHorizontal)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 相关垂直线路的列表。<//p>";
CATKnowledge.GetVerticalAlignments.Sample="Let myHorizontalAlignment(AECAlignment2DHorizontal)
Let ListVA	(List)
ListVA = myHorizontalAlignment->GetVerticalAlignments()\n";

CATKnowledge.GetLabelDisplaySide.Description="<p>根据 3d 模型中的水平线路检索桩号标签的放置方向。
关系将为 DirectionEnum，并且可能值可为 0-Left 或 1-Right。
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平线路 (AECAlignment2DHorizontal)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 标签放置方向。<//p>";
CATKnowledge.GetLabelDisplaySide.Sample="Let myHorizontalAlignment(AECAlignment2DHorizontal)
Let displaySide	(DirectionEnum)
displaySide = myHorizontalAlignment->GetLabelDisplaySide()\n";

CATKnowledge.GetPIPoints.Description="<p>此方法返回表示水平弧相交点的点列表。
此列表可能有一个点或两个点。<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平线路弧 (AECHorizontalArc)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 水平弧的相交点列表，作为 AECAlignmentPoint 的列表。<//p>";
CATKnowledge.GetPIPoints.Sample="Let myHorizontalArc(AECHorizontalArc)
Let listPIPoint(list)
listPIPoint=myHorizontalArc->GetPIPoints()\n";

CATKnowledge.IsHPI.Description="<p>如果输入线路点是 HPI，则应答查询。
<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>Alignment Point(AECAlignmentPoint)。<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 如果点为 HPI。<//p>";
CATKnowledge.IsHPI.Sample="Let myPoint(AECAlignmentPoint)
Let bIsHPI(Boolean)
bIsHPI = myPoint.IsHPI()\n";

CATKnowledge.IsVPI.Description="<p>如果输入线路点是 IsVPI，则应答查询。
<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>Alignment Point(AECAlignmentPoint)。<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 如果点为 IsVPI。<//p>";
CATKnowledge.IsVPI.Sample="Let myPoint(AECAlignmentPoint)
Let bIsVPI(Boolean)
bIsVPI = myPoint.IsVPI()\n";

CATKnowledge.IsSecondPI.Description="<p>如果输入线路点是第二个 PI，则应答查询。
这适用于双 PI 场景。
<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>Alignment Point(AECAlignmentPoint)。<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 如果点为第二个 PI。<//p>";
CATKnowledge.IsSecondPI.Sample="Let myPoint(AECAlignmentPoint)
Let bIsSecondPI(Boolean)
bIsSecondPI = myPoint.IsSecondPI()\n";

CATKnowledge.GetSecondPI.Description="<p>如果第二个 PI 存在于给定的 PI 点，则获取第二个 PI。
<span style=\"font-size:12px;\"></span><//p>
<p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>Alignment Point(AECAlignmentPoint)。<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 第二个 PI 点。<//p>";
CATKnowledge.GetSecondPI.Sample="Let myPoint(AECAlignmentPoint)
Let SecondPIPt(AECAlignmentPoint)
SecondPIPt = myPoint.GetSecondPI()\n";

CATKnowledge.GetExtremityDistances.Description="<p>此方法会返回水平线路中切线、回旋曲线、过渡或圆弧截面的起点和终点距离，或垂直线路中切线等级或过渡的起点和终点距离。它会在长度尺寸中返回距离。
<span style=\"font-size:12px;\"></span><//p><p>
<span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p>
<p>水平切线 (AECHorizontalTangent)、水平圆弧 (AECHorizontalArc)、水平回旋曲线 (AECHorizontalClothoid)、水平过渡 (AECHorizontalTransition)、垂直过渡 (AECVerticalTransition) 或垂直切线 (AECTangentGrade)<//p>
<p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p>
<p>- 长度尺寸中的段的起点和终点距离。<//p>";
CATKnowledge.GetExtremityDistances.Sample="Let myTangentHA(AECHorizontalTangent)
Let dStartDistance(LENGTH)
Let dEndDistance(LENGTH)
myTangentHA->GetExtremityDistances(dStartDistance, dEndDistance),

            or,

Let myHorizontalArc(AECHorizontalArc)
Let dStartDistance(LENGTH)
Let dEndDistance(LENGTH)
myHorizontalArc->GetExtremityDistances(dStartDistance, dEndDistance),

            or,

Let myHorizontalClothoid(AECHorizontalClothoid)
Let dStartDistance(LENGTH)
Let dEndDistance(LENGTH)
myHorizontalClothoid->GetExtremityDistances(dStartDistance, dEndDistance),

            or,

Let myHorizontalTransition(AECHorizontalTransition)
Let dStartDistance(LENGTH)
Let dEndDistance(LENGTH)
myHorizontalTransition->GetExtremityDistances(dStartDistance, dEndDistance),

            or,

Let myVerticalTransition(AECTangentGrade)
Let dStartDistance(LENGTH)
Let dEndDistance(LENGTH)
myVerticalTransition->GetExtremityDistances(dStartDistance, dEndDistance),

            or,

Let myVerticalTransition(AECVerticalTransition)
Let dStartDistance(LENGTH)
Let dEndDistance(LENGTH)
myVerticalTransition->GetExtremityDistances(dStartDistance, dEndDistance)\n";
